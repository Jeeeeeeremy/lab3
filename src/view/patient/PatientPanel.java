package view.patient;

import model.Doctor;
import model.Encounter;
import model.Patient;
import model.VitalSigns;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.HashMap;

/**
 *
 * @author qiaotong
 */
public class PatientPanel extends javax.swing.JPanel {

    private Doctor doctor;
    private Patient patient;
    private HashMap<String, ArrayList<Doctor>> hospitals;
    private HashMap<String,ArrayList<String>> communityDirectory;
    private HashMap<String, ArrayList<String>> cityDirectory;

    /**
     * Creates new form PatientPanel
     */
    public PatientPanel() {
        initComponents();
    }

    public PatientPanel(Patient patient, HashMap<String, ArrayList<Doctor>> hospitals, HashMap<String,ArrayList<String>> communityDirectory, HashMap<String, ArrayList<String>> cityDirectory){
        this.patient = patient;
        this.hospitals = hospitals;
        this.communityDirectory = communityDirectory;
        this.cityDirectory = cityDirectory;
        initComponents();
        ArrayList<Doctor> doctorArrayList = new ArrayList<>();
        hospitals.keySet().forEach(one->{
            doctorArrayList.addAll(this.hospitals.get(one));
        });
        displayTable(doctorArrayList);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        doctorTable = new javax.swing.JTable();
        doctorItem = new javax.swing.JComboBox<>();
        searchText = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        AppointButton = new javax.swing.JButton();

        doctorTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null},
                        {null, null},
                        {null, null},
                        {null, null}
                },
                new String [] {
                        "Doctor Name", "Hospital"
                }
        ) {
            Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(doctorTable);

        doctorItem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Doctor", "Hospital", "Community" }));

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        AppointButton.setText("Appoint");
        AppointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AppointButtonActionPerformed(evt,doctor);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1)
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(doctorItem, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(70, 70, 70)
                                .addComponent(searchButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                                .addComponent(AppointButton)
                                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(doctorItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(searchButton)
                                        .addComponent(AppointButton))
                                .addGap(82, 82, 82))
        );
    }// </editor-fold>

    private void AppointButtonActionPerformed(java.awt.event.ActionEvent evt,Doctor doctor) {
        // TODO add your handling code here:
        if(null == doctor){
            JOptionPane.showMessageDialog(this,"Please select a doctor!");
            return;
        }
        Encounter encounter = new Encounter(new VitalSigns(), "");
        patient.getEncounterHistory().add(encounter);
        doctor.getPatientWaitingList().add(patient);
        JOptionPane.showMessageDialog(this,"Successful Appointment!");
    }

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String text = searchText.getText();
        String doctorItem = this.doctorItem.getSelectedItem().toString();
        ArrayList<Doctor> doctorAllList = new ArrayList<>();
        hospitals.keySet().forEach(one->{
            doctorAllList.addAll(hospitals.get(one));
        });
        ArrayList<Doctor> result = new ArrayList<>();
        switch (doctorItem){
            case "Doctor":
                for(Doctor d : doctorAllList){
                    if(d.getName().contains(text)){
                        result.add(d);
                    }
                }
                if(result.size() == 0){
                    JOptionPane.showMessageDialog(this,"Can Not Find Such Doctor!");
                }else {
                    displayTable(result);
                }
                break;
            case "Hospital":
                for(String hospital : hospitals.keySet()){
                    if(hospital.contains(text)){
                        result.addAll(hospitals.get(hospital));
                    }
                }
                if(result.size() == 0){
                    JOptionPane.showMessageDialog(this,"Can Not Find Such Doctor!");
                }else {
                    displayTable(result);
                }
                break;
            case "Community":
                ArrayList<String> hospitalList = new ArrayList<>();
                for(String community : communityDirectory.keySet()){
                    if(community.contains(text)){
                        hospitalList.addAll(communityDirectory.get(community));
                    }
                }
                if(hospitalList.size() > 0){
                    for(String hospital : hospitalList){
                        result.addAll(hospitals.get(hospital));
                    }
                }
                if(result.size() == 0){
                    JOptionPane.showMessageDialog(this,"Can Not Find Such Doctor!");
                }else {
                    displayTable(result);
                }
                break;
            default:
                break;
        }
    }

    void displayTable(ArrayList<Doctor> doctorList){
        if(null == doctorList || doctorList.size() == 0){
            return;
        }
        DefaultTableModel model = (DefaultTableModel)doctorTable.getModel();
        model.setRowCount(0);
        doctorTable.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                selectDoctor();
            }

            @Override
            public void mousePressed(MouseEvent e) {}

            @Override
            public void mouseReleased(MouseEvent e) {}

            @Override
            public void mouseEntered(MouseEvent e) {}

            @Override
            public void mouseExited(MouseEvent e) {}
        });
        for(Doctor doctor : doctorList){
            String[] row = new String[3];
            row[0] = doctor.getName();
            row[1] = doctor.getHospital();
            model.addRow(row);
        }
    }

    private void selectDoctor(){
        int selectedRow = doctorTable.getSelectedRow();
        if(selectedRow >= 0){
            String name = (String)doctorTable.getValueAt(selectedRow, 0);
            hospitals.keySet().forEach(one->{
                hospitals.get(one).forEach(t->{
                    if(name.equals(t.getName())){
                        doctor = t;
                    }
                });
            });
        }
    }
    // Variables declaration - do not modify
    private javax.swing.JButton AppointButton;
    private javax.swing.JComboBox<String> doctorItem;
    private javax.swing.JTable doctorTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchText;
    // End of variables declaration
}
